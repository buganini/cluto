#!/usr/bin/env python
"""
 Copyright (c) 2011 Kuan-Chung Chiu <buganini@gmail.com>

 Permission to use, copy, modify, and distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""

import os
import sys
import tempfile
from gi.repository import Gtk, Gdk
import md5
import Image

tempdir=tempfile.mkdtemp(prefix='extractager_')

class ZoomedImage(object):
	def __init__(self, path, tname):
		self.image=Image.open(path).convert('RGBA')
		self.tname=tname
	def get_zoomed_gtk_image(self, scale):
		w,h=self.image.size
		factor=scale*0.01
		w=int(w*factor)
		h=int(h*factor)
		tfile=os.path.join(tempdir, "%s_%dx%d.png" % (self.tname, w, h))
		if not os.path.exists(tfile):
			im=self.image.resize((w,h))
			im.save(tfile)
		return Gtk.Image.new_from_file(tfile)
		

class Extractager(object):
	def __init__(self):
		self.current_image=None
		self.focus=None
		self.id_map={}
		self.files=[]
		self.current_image=None
		self.zoom=Gtk.Adjustment()
		self.zoom.set_lower(1)
		self.zoom.set_upper(400)
		self.zoom.set_value(100)
		self.zoom.set_step_increment(10)
		self.zoom.connect("value-changed", self.zoom_image)
		self.builder = Gtk.Builder()
		for datadir in ['.','/usr/local/share/extractager']:
			fullpath=os.path.join(datadir, 'extractager.xml')
			if os.path.exists(fullpath):
				break
		else:
			sys.stderr.write('Unable to find extractager.xml\n')
			sys.exit(1)

		self.builder.add_from_file(fullpath)
		self.window = self.builder.get_object("main_window")
		self.window.connect("delete-event", Gtk.main_quit)

		#toolbar
		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ADD, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.add_item)
		button.show()
		btn_img.show()
		self.builder.get_object('toolbar').pack_start(button, False, False, 0)

		scale=Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=self.zoom)
		self.builder.get_object('toolbar').pack_start(scale, True, True, 0)
		scale.show()
		

		#filechooser
		self.builder.get_object('btn_item_add').connect('clicked', self.add_item_r)
		self.builder.get_object('btn_item_cancel').connect('clicked', self.hide_filechooser)

		#launch
		self.window.show()

	def hide_filechooser(self, *arg):
		self.builder.get_object('filechooserdialog').hide()

	def add_item(self, *arg):
		self.builder.get_object('filechooserdialog').show()

	def add_item_r(self, *arg):
		for path in self.builder.get_object("filechooserdialog").get_filenames():
			try:
				im=Image.open(path)
				del(im)
			except:
				continue
			self.id_map[path]=md5.new(path).hexdigest()
			self.files.append(path)
		self.hide_filechooser()
		self.redraw_items_list()

	def redraw_items_list(self):
		for path in self.files:
			id=self.id_map[path]
			tfile=os.path.join(tempdir, "%s.png" % id)
			im=Image.open(path).convert('RGBA')
			im=im.resize(self.thumbsize(im.size, (160,240)))
			im.save(tfile)
			del(im)
			evtbox=Gtk.EventBox()
			box=Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
			img=Gtk.Image.new_from_file(tfile)
			label=Gtk.Label(os.path.basename(path))
			box.pack_start(img, False, False, 0)
			box.pack_start(label, False, False, 0)
			evtbox.add(box)
			evtbox.connect("button-press-event", self.item_button_press, path)
			self.builder.get_object("items_list").pack_start(evtbox, False, False, 5)
			evtbox.show()
			box.show()
			img.show()
			label.show()

	def item_button_press(self, obj, evt, path):
		if evt.button==1 and evt.type==Gdk.EventType.BUTTON_PRESS:
			self.item_select(path)

	def item_select(self, path):
		self.focus=path
		id=self.id_map[path]
		self.current_image=ZoomedImage(path, id)
		self.zoom_image()

	def zoom_image(self, *arg):
		img=self.current_image.get_zoomed_gtk_image(self.zoom.get_value())
		workarea=self.builder.get_object("workarea")
		for c in workarea.get_children():
			workarea.remove(c)
			c.destroy()
		workarea.add(img)
		img.show()

	def thumbsize(self, o,n):
		ow,oh=o
		nw,nh=n
		if ow>oh:
			return (nw, int(float(nw)*oh/ow))
		else:
			return (int(float(nh)*ow/oh), nh)

if __name__ == "__main__":
	app = Extractager()
	Gtk.main()
	os.execvp("rm",["rm","-rf",tempdir])
