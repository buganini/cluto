#!/usr/bin/env python
"""
 Copyright (c) 2011 Kuan-Chung Chiu <buganini@gmail.com>

 Permission to use, copy, modify, and distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""

import os
import sys
import tempfile
from gi.repository import Gtk, Gdk, cairo
import md5
import Image
import re
import pickle

tempdir=tempfile.mkdtemp(prefix='ctie_')

class CTIE(object):
	def __init__(self):
		self.clipboard=[]
		self.selections=[]
		self.last_level=None
		self.current_image=None
		self.focus=None
		self.canvas=None
		self.id_map={}
		self.clips=[]
		self.zoom=100
		self.selstart=(-1,-1)
		self.selend=(-1,-1)
		self.tags=['filename']
		self.copy_tag=[]
		self.builder = Gtk.Builder()
		for datadir in ['.','/usr/local/share/ctie']:
			fullpath=os.path.join(datadir, 'ctie.xml')
			if os.path.exists(fullpath):
				break
		else:
			sys.stderr.write('Unable to find ctie.xml\n')
			sys.exit(1)

		self.builder.add_from_file(fullpath)
		self.window = self.builder.get_object("main_window")
		self.window.connect("delete-event", Gtk.main_quit)

		level=self.builder.get_object("level")
		level.set_entry_text_column(0)
		level.connect("changed", self.change_level)
		self.level_sanitize()

		#toolbar
		toolbar=self.builder.get_object('toolbar')

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_OPEN, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.open_project)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_SAVE, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.save_project)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		sep=Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
		sep.show()
		toolbar.pack_start(sep, False, False, 1)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ADD, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.add_item)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_REMOVE, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.remove_item)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		sep=Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
		sep.show()
		toolbar.pack_start(sep, False, False, 1)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ZOOM_IN, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.zoom_in)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ZOOM_OUT, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.zoom_out)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ZOOM_100, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.zoom_100)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_ZOOM_FIT, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.zoom_fit)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		sep=Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
		sep.show()
		toolbar.pack_start(sep, False, False, 1)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_CUT, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.trim)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		sep=Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
		sep.show()
		toolbar.pack_start(sep, False, False, 1)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_COPY, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.copy)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_PROPERTIES, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.copy_setting)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_PASTE, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.paste)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		sep=Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
		sep.show()
		toolbar.pack_start(sep, False, False, 1)

		button=Gtk.Button()
		btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_JUMP_TO, Gtk.IconSize.DND)
		button.set_image(btn_img)
		button.connect("clicked", self.export_show)
		button.show()
		btn_img.show()
		toolbar.pack_start(button, False, False, 0)

		#workarea
		workarea=self.builder.get_object("workarea")
		workarea.connect("button-press-event", self.workarea_mouse)
		workarea.connect("button-release-event", self.workarea_mouse)
		workarea.connect("motion-notify-event", self.workarea_mouse)

		#tag
		self.builder.get_object('btn_add_tag').connect('clicked', self.add_tag)

		#filechooser
		self.builder.get_object('btn_item_add').connect('clicked', self.add_item_r)
		self.builder.get_object('btn_item_cancel').connect('clicked', self.hide_filechooser)

		#export
		self.builder.get_object('btn_append_tag').connect('clicked', self.append_tag)
		self.builder.get_object('btn_export_close').connect('clicked', lambda x: self.builder.get_object('export_window').hide())
		self.builder.get_object('btn_export').connect('clicked', self.do_export)

		#copy setting
		self.builder.get_object('btn_copy_setting_close').connect('clicked', lambda x: self.builder.get_object('copy_setting_window').hide())

		#launch
		self.window.show()

	def trim(self, *arg):
		if len(self.clips)==0 or not self.builder.get_object("level").get_active_text():
			return
		items_list=self.builder.get_object("items_list")
		for c in items_list.get_children():
			items_list.remove(c)
			c.destroy()
		flag=0
		s=self.clips
		for i in xrange(0,int(self.builder.get_object("level").get_active_text())):
			ns=[]
			for x in s:
				ns.extend(x['children'])
			s=ns
		for p in s:
			im=Image.open(p['path']).convert('RGBA').crop((p['x1'], p['y1'], p['x2'], p['y2']))
			x1=p['x1']
			y1=p['y1']
			x2=p['x2']
			y2=p['y2']
			im=Image.open(p['path']).crop((x1, y1, x2, y2)).convert('L')

			#x1
			stop=False
			for a in xrange(x2-x1):
				for i in xrange(y2-y1):
					c=im.getpixel((a,i))
					if i:
						if abs(c-last)>10:
							stop=True
							break
					else:
						last=c
				if stop:
					break
			nx1=x1+a

			#y1
			stop=False
			for a in xrange(y2-y1):
				for i in xrange(x2-x1):
					c=im.getpixel((i,a))
					if i:
						if abs(c-last)>10:
							stop=True
							break
					else:
						last=c
				if stop:
					break
			ny1=y1+a

			#x2
			stop=False
			w=x2-x1
			for a in xrange(x2-x1):
				for i in xrange(y2-y1):
					c=im.getpixel((w-a-1,i))
					if i:
						if abs(c-last)>10:
							stop=True
							break
					else:
						last=c
				if stop:
					break
			nx2=x2-a

			#y2
			stop=False
			h=y2-y1
			for a in xrange(y2-y1):
				for i in xrange(x2-x1):
					c=im.getpixel((i,h-a-1))
					if i:
						if abs(c-last)>10:
							stop=True
							break
					else:
						last=c
				if stop:
					break
			ny2=y2-a

			p['x1']=nx1
			p['y1']=ny1
			p['x2']=nx2
			p['y2']=ny2
		self.redraw_items_list()
		self.item_select(self.focus)

	def open_project(self, *arg):
		filec=Gtk.FileChooserDialog("Open", self.builder.get_object("main_window"), Gtk.FileChooserAction.SAVE, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))
		if Gtk.Dialog.run(filec)==Gtk.ResponseType.ACCEPT:
			fp=open(filec.get_filename(),'r')
			data=pickle.load(fp)
			fp.close()
			self.id_map, self.clips, self.tags, self.copy_tag=data
		filec.destroy()
		self.level_sanitize()
		self.redraw_items_list()
		self.tags_refresh()

	def save_project(self, *arg):
		filec=Gtk.FileChooserDialog("Save", self.builder.get_object("main_window"), Gtk.FileChooserAction.SAVE, (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))
		if Gtk.Dialog.run(filec)==Gtk.ResponseType.ACCEPT:
			data=[self.id_map, self.clips, self.tags, self.copy_tag]
			fp=open(filec.get_filename(),'w')
			pickle.dump(data, fp)
			fp.close()
		filec.destroy()

	def copy_setting(self, obj, *arg):
		tagsbox=self.builder.get_object("copy_setting_tags")
		c=tagsbox.get_child()
		if c:
			tagsbox.remove(c)
		tags_table=Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
		tagsbox.add(tags_table)
		tags_table.show()
		for i,tag in enumerate(self.tags):
			if tag=='filename':
				continue
			toggle=Gtk.CheckButton.new_with_label(tag)
			toggle.connect('toggled', self.copy_setting_toggle, tag)
			if tag in self.copy_tag:
				toggle.set_active(True)
			tags_table.pack_start(toggle,False,False,0)
			toggle.show()
		self.builder.get_object("copy_setting_window").show()

	def copy_setting_toggle(self, obj, tag):
		if tag in self.copy_tag:
			self.copy_tag.remove(tag)
		else:
			self.copy_tag.append(tag)

	def copy(self, *arg):
		if not self.focus:
			return
		self.clipboard=[]
		for i in self.selections:
			self.clipboard.append(self.focus['children'][i])

	def paste(self, *arg):
		if not self.focus:
			return
		for p in self.clipboard:
			path=self.focus['path']
			tags={'filename':os.path.basename(path)}
			t=p
			ptags={}
			while t:
				for tag in t['tags']:
					if tag not in ptags:
						ptags[tag]=t['tags'][tag]
				t=t['parent']
			for tag in self.copy_tag:
				if tag in ptags:
					tags[tag]=ptags[tag]
			self.focus['children'].append({'path':path,'x1':p['x1']-p['parent']['x1']+self.focus['x1'],'y1':p['y1']-p['parent']['y1']+self.focus['y1'],'x2':p['x2']-p['parent']['x1']+self.focus['x1'],'y2':p['y2']-p['parent']['y1']+self.focus['y1'],'children':[], 'tags':tags, 'parent':self.focus})
		self.canvas.queue_draw()

	def do_export(self, *arg):
		s=self.clips
		while s:
			ns=[]
			for p in s:
				if not p['children']:
					t=p
					tags={}
					while t:
						for tag in t['tags']:
							if tag not in tags:
								tags[tag]=t['tags'][tag]
						t=t['parent']
					for tag in self.tags:
						if tag not in tags:
							tags[tag]=""						

					path=self.builder.get_object('path_pattern').get_text()
					path=path.split("${")
					for i,t in enumerate(path):
						t2=t.split("}",1)
						if t2[0] in tags:
							t2[0]=tags[t2[0]]
						path[i]=''.join(t2)

					path=''.join(path)
					path=os.path.join(self.builder.get_object('output_dir').get_filename(), path)
					pdir=os.path.dirname(path)
					if not os.path.exists(pdir):
						os.makedirs(pdir)		
					im=Image.open(p['path']).convert("RGBA").crop((p['x1'],p['y1'],p['x2'],p['y2']))
					im.save(path)
				ns.extend(p['children'])
			s=ns

	def append_tag(self, *arg):
		b=self.builder.get_object('path_pattern')
		b.set_text("%s${%s}" % (b.get_text(), self.builder.get_object('tags_list').get_active_text()))

	def export_show(self, *arg):
		tags_list=self.builder.get_object('tags_list')
		tags_list.set_entry_text_column(0)
		tags_list.remove_all()
		for tag in self.tags:
			tags_list.append_text(tag)
		self.builder.get_object('export_window').show()

	def add_tag(self, *arg):
		tag=self.builder.get_object('new_tag').get_text()
		if tag and not tag in self.tags:
			self.tags.append(tag)
		self.tags_refresh()

	def canvas_draw(self, widget, cr):
		if not self.focus:
			return
		factor=self.zoom*0.01
		p=self.focus
		width=p['x2']-p['x1']
		height=p['y2']-p['y1']

		cr.scale(factor, factor)
		self.canvas.set_size_request(int(width*factor), int(height*factor))

		Gdk.cairo_set_source_pixbuf(cr, self.current_image.get_pixbuf(), 0, 0)
		cr.paint()
		for i,c in enumerate(p['children']):
			x1=(c['x1']-p['x1'])
			y1=(c['y1']-p['y1'])
			x2=(c['x2']-p['x1'])
			y2=(c['y2']-p['y1'])
			if i in self.selections:
				cr.set_source_rgba(0,0,255,255)
				xoff=self.selend[0]-self.selstart[0]
				yoff=self.selend[1]-self.selstart[1]
				cr.rectangle(x1+xoff, y1+yoff, x2-x1, y2-y1)
			else:
				cr.set_source_rgba(255,0,0,255)
				cr.rectangle(x1, y1, x2-x1, y2-y1)
			cr.stroke()
		if self.selstart!=(-1,-1) and len(self.selections)==0:
			cr.set_source_rgba(255,0,255,255)
			cr.rectangle(self.selstart[0], self.selstart[1], self.selend[0]-self.selstart[0], self.selend[1]-self.selstart[1])
			cr.stroke()

	def zoom_fit(self, *arg):
		if not self.focus:
			return
		p=self.focus
		workarea_window=self.builder.get_object('workarea_window')
		alloc=workarea_window.get_allocation()
		win_width=alloc.width
		win_height=alloc.height
		width=p['x2']-p['x1']
		height=p['y2']-p['y1']
		if width>win_width*0.8:
			self.zoom=(win_width*0.8/width)*100
		else:
			self.zoom=100
		self.canvas.queue_draw()

	def zoom_100(self, *arg):
		self.zoom=100
		self.canvas.queue_draw()

	def zoom_in(self, *arg):
		self.zoom+=5
		self.canvas.queue_draw()

	def zoom_out(self, *arg):
		if self.zoom>5:
			self.zoom-=5
		self.canvas.queue_draw()

	def hide_filechooser(self, *arg):
		self.builder.get_object('filechooserdialog').hide()

	def remove_item(self, *arg):
		if not self.focus:
			return
		parent=self.focus['parent']
		if not parent:
			idx=self.clips.index(self.focus)
			del(self.clips[idx])
			if idx<len(self.clips):
				self.item_select(self.clips[idx])
			else:
				self.focus=None
		else:
			idx=parent['children'].index(self.focus)
			del(parent['children'][idx])
			if idx<len(parent['children']):
				self.item_select(parent['children'][idx])
			else:
				self.focus=None
		self.level_sanitize()
		self.redraw_items_list()

	def add_item(self, *arg):
		self.builder.get_object('filechooserdialog').show()

	def add_item_r(self, *arg):
		for path in self.builder.get_object("filechooserdialog").get_filenames():
			try:
				im=Image.open(path)
			except:
				continue
			self.id_map[path]=md5.new(path).hexdigest()
			self.clips.append({'path':path,'x1':0,'y1':0,'x2':im.size[0],'y2':im.size[1],'children':[], 'tags':{'filename':os.path.basename(path)}, 'parent':None})
			del(im)
		self.hide_filechooser()
		self.redraw_items_list()
		self.level_sanitize()

	def change_level(self, *arg):
		level=self.builder.get_object("level").get_active_text()
		if level!=self.last_level and level:
			self.last_level=level
			self.focus=None
			self.redraw_items_list()

	def redraw_items_list(self, *arg):
		if len(self.clips)==0 or not self.builder.get_object("level").get_active_text():
			return
		items_list=self.builder.get_object("items_list")
		for c in items_list.get_children():
			items_list.remove(c)
			c.destroy()
		flag=0
		s=self.clips
		for i in xrange(0,int(self.builder.get_object("level").get_active_text())):
			ns=[]
			for x in s:
				ns.extend(x['children'])
			s=ns
		for p in s:
			if not flag:
				flag=1
				if not self.focus:
					self.item_select(p)
			tfile=os.path.join(tempdir, "%s-%dx%dx%dx%d-thumbnail.png" % (self.id_map[p['path']], p['x1'], p['y1'], p['x2'], p['y2']))
			if not os.path.exists(tfile):
				im=Image.open(p['path']).convert('RGBA').crop((p['x1'], p['y1'], p['x2'], p['y2']))
				im=im.resize(self.thumbsize(im.size, (160,240)))
				im.save(tfile)
				del(im)
			evtbox=Gtk.EventBox()
			box=Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
			img=Gtk.Image.new_from_file(tfile)
			label=Gtk.Label(os.path.basename(p['path']))
			box.pack_start(img, False, False, 0)
			box.pack_start(label, False, False, 0)
			evtbox.add(box)
			evtbox.connect("button-press-event", self.item_button_press, p)
			items_list.pack_start(evtbox, False, False, 5)
			evtbox.show()
			box.show()
			img.show()
			label.show()

	def level_sanitize(self):
		level=self.builder.get_object("level")
		l=0
		s=self.clips
		while s:
			l+=1
			ns=[]
			for x in s:
				ns.extend(x['children'])
			s=ns
		try:
			active=int(level.get_active_text())
		except:
			active=0
		level.remove_all()
		for i in xrange(0,l):
			level.append_text(str(i))
		if active<l:
			level.set_active(active)
		else:
			level.set_active(l-1)			

	def item_button_press(self, obj, evt, cpath):
		if evt.button==1 and evt.type==Gdk.EventType.BUTTON_PRESS:
			self.item_select(cpath)

	def tags_refresh(self, *arg):
		if not self.focus:
			return
		self.builder.get_object('new_tag').show()
		self.builder.get_object('btn_add_tag').show()
		t=self.focus
		tags={}
		while t:
			for tag in t['tags']:
				if tag not in tags:
					tags[tag]=t['tags'][tag]
			t=t['parent']
		for tag in self.tags:
			if tag not in tags:
				tags[tag]=""

		tagsbox=self.builder.get_object('tags')
		c=tagsbox.get_child()
		if c:
			tagsbox.remove(c)
		tags_table=Gtk.Grid()
		tagsbox.add(tags_table)
		tags_table.show()
		for i,tag in enumerate(self.tags):
			text=Gtk.Entry()
			text.set_text(tags[tag])
			text.connect('changed', self.set_tag, tag)
			label=Gtk.Label(tag)
			button=Gtk.Button()
			btn_img=Gtk.Image.new_from_stock(Gtk.STOCK_CLEAR, Gtk.IconSize.BUTTON)
			button.set_image(btn_img)
			button.connect("clicked", self.clear_tag, tag)
			tags_table.attach(label,0,i,1,1)
			tags_table.attach(text,1,i,1,1)
			tags_table.attach(button,2,i,1,1)
			label.show()
			text.show()
			button.show()
			btn_img.show()

	def set_tag(self, obj, tag):
		self.focus['tags'][tag]=obj.get_buffer().get_text()

	def clear_tag(self, obj, tag):
		del(self.focus['tags'][tag])
		self.tags_refresh()

	def item_select(self, p):
		self.focus=p
		id=self.id_map[p['path']]
		self.selections=[]

		self.tags_refresh()

		tfile=os.path.join(tempdir, "%s-%dx%dx%dx%d.png" % (self.id_map[p['path']], p['x1'], p['y1'], p['x2'], p['y2']))
		if not os.path.exists(tfile):
			im=Image.open(p['path']).convert('RGBA').crop((p['x1'], p['y1'], p['x2'], p['y2']))
			im.save(tfile)
		self.current_image=Gtk.Image.new_from_file(tfile)
		workarea=self.builder.get_object('workarea')
		c=workarea.get_child()
		if c:
			workarea.remove(c)
			c.destroy()
		canvas=Gtk.DrawingArea()
		self.canvas=canvas
		workarea.add(canvas)
		canvas.connect("draw", self.canvas_draw)
		canvas.show()
		self.zoom_fit()

	def workarea_mouse(self, obj, evt):
		if not self.canvas:
			return
		factor=1
		factor=self.zoom*0.01
		if str(type(evt))==repr(Gdk.EventButton):
			if evt.button==1 and evt.type==Gdk.EventType.BUTTON_PRESS:
				self.selstart=(evt.x/factor, evt.y/factor)
			elif evt.button==1 and evt.type==Gdk.EventType.BUTTON_RELEASE:
				x1,y1=self.selstart
				if x1<0 or y1<0:
					return
				x2=evt.x/factor
				y2=evt.y/factor
				p=self.focus
				if x1==x2 and y1==y2:
					for i,c in enumerate(p['children']):
						if x1+p['x1']>c['x1'] and x1+p['x1']<c['x2'] and y1+p['y1']>c['y1'] and y1+p['y1']<c['y2']:
							if i in self.selections:
								self.selections.remove(i)
							else:
								self.selections.append(i)
				elif len(self.selections):
					xoff=self.selend[0]-self.selstart[0]
					yoff=self.selend[1]-self.selstart[1]
					todo=[]
					for i in self.selections:
						todo.append(p['children'][i])
					while todo:
						newtodo=[]
						for i in todo:
							i['x1']+=int(xoff)
							i['y1']+=int(yoff)
							i['x2']+=int(xoff)
							i['y2']+=int(yoff)
						newtodo.extend(i['children'])
						todo=newtodo
				else:
					if x1>x2:
						x1,x2=x2,x1
					if y1>y2:
						y1,y2=y2,y1
					p['children'].append({'path':p['path'], 'x1':int(x1+p['x1']), 'y1':int(y1+p['y1']), 'x2':int(x2+p['x1']), 'y2':int(y2+p['y1']), 'children':[], 'parent':p, 'tags':{'filename':os.path.basename(p['path'])}})
					self.level_sanitize()					
				self.selstart=(-1,-1)
				self.selend=(-1,-1)
				self.canvas.queue_draw()
			elif evt.button==3:
				self.selstart=(-1,-1)
		elif str(type(evt))==repr(Gdk.EventMotion):
			self.selend=(evt.x/factor,evt.y/factor)
			self.canvas.queue_draw()

	def thumbsize(self, o,n):
		ow,oh=o
		nw,nh=n
		if float(ow)/oh>float(nw)/nh:
			return (nw, int(float(nw)*oh/ow))
		else:
			return (int(float(nh)*ow/oh), nh)

if __name__ == "__main__":
	app = CTIE()
	Gtk.main()
	os.execvp("rm",["rm","-rf",tempdir])
